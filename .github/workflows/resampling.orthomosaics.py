# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10NE18RIDCrhB7bUvPu6HSklZTtUrBlAG
"""

from google.colab import drive
drive.mount('/content/drive')

# Install YOLOv8
!pip install ultralytics --upgrade

# (Optional) Check GPU
!nvidia-smi

# Upload file from Roboflow
from google.colab import drive, files
uploaded = files.upload()

# Unzipping dataset from Roboflow
!unzip -q '*.zip' -d ./custom_dataset

# Verify paths
!ls ./custom_dataset

# Set path to your custom YAML
DATA_YAML_PATH = './custom_dataset/data.yaml'

# Load pretrained YOLO  model such as yolov8m.pt (fine-tune on custom data)
from ultralytics import YOLO
model = YOLO("yolov8m.pt")

# Clearing memory before training
import torch
torch.cuda.empty_cache()
torch.cuda.reset_peak_memory_stats()

# Train on your dataset
results = model.train(
    data=DATA_YAML_PATH,
    epochs=100,               # Number of training epochs
    imgsz=1024,               # Input image size
    batch=4,                  # Batch size (adjust for GPU memory)
    name='yolov8m-1280',
    project="/content/drive/MyDrive/yolov8m_drone_training_CLEAN/1st_Experiment",
    save=True,                # Save checkpoints
    save_period=10,           # Save every 10 epochs
    patience=30,              # Stop early if metrics don't improve
    multi_scale=True)

# Evaluate the model on the validation set
metrics = model.val(data=DATA_YAML_PATH)
print(f"mAP50-95: {metrics.box.map:.3f}, mAP50: {metrics.box.map50:.3f}")

# Optional: Save entire experiment to Google Drive
drive.mount('/content/drive')
#Saving the entire results folder to Drive
!cp -r runs /content/drive/MyDrive/yolov8m_drone_training_CLEAN/

# Predict on your test set images
TEST_IMAGES_DIR = './custom_dataset/test/images'

pred_results = model.predict(
    source=TEST_IMAGES_DIR,
    save=True,        # Save prediction images
    save_txt=True,    # save bounding boxes in text files
    save_conf=True,   # Save confidence scores
    imgsz=1024,
    conf=0.25)

import cv2
from matplotlib import pyplot as plt
import os

predict_dir = "/content/drive/MyDrive/yolov8m_drone_training_CLEAN/1st_Experiment/yolov8m-128066"  # adjust if different
images = [f for f in os.listdir(predict_dir) if f.endswith(".jpg") or f.endswith(".png")]

# Show first 5 prediction images (OPTIONAL)
for img_file in images[:5]:
    img_path = os.path.join(predict_dir, img_file)
    img = cv2.imread(img_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # convert for matplotlib
    plt.figure(figsize=(8,8))
    plt.imshow(img)
    plt.axis("off")
    plt.show()

# Download best model weights for future finetuning
# Important for application of model and model comparisons
from google.colab import files
files.download("/content/drive/MyDrive/yolov8m_drone_training_CLEAN/1st_Experiment/yolov8m-12806/weights/best.pt")
